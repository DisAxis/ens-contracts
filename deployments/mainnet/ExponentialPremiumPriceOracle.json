{
  "address": "0xCF7fe2e614f568989869F4AADe060F4EB8a105BE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_startPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDays",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "elapsed",
          "type": "uint256"
        }
      ],
      "name": "decayedPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rentPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2ed7f1b491fe5b13efac4b8cdb48b21631437766168052ba5c2b22206ceffdd",
  "receipt": {
    "to": null,
    "from": "0x0904Dac3347eA47d208F3Fd67402D039a3b99859",
    "contractAddress": "0xCF7fe2e614f568989869F4AADe060F4EB8a105BE",
    "transactionIndex": 167,
    "gasUsed": "1241706",
    "logsBloom": "0x
    "blockHash": "0xe4091c455ae20db753169d9fd4e4f5afd5e387d0bdda824115201745ee6fad30",
    "transactionHash": "0xc2ed7f1b491fe5b13efac4b8cdb48b21631437766168052ba5c2b22206ceffdd",
    "logs": [
      {
        "transactionIndex": 167,
        "blockNumber": 14580673,
        "transactionHash": "0xc2ed7f1b491fe5b13efac4b8cdb48b21631437766168052ba5c2b22206ceffdd",
        "address": "0xCF7fe2e614f568989869F4AADe060F4EB8a105BE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000904dac3347ea47d208f3fd67402d039a3b99859"
        ],
        "data": "0x",
        "logIndex": 482,
        "blockHash": "0xe4091c455ae20db753169d9fd4e4f5afd5e387d0bdda824115201745ee6fad30"
      },
      {
        "transactionIndex": 167,
        "blockNumber": 14580673,
        "transactionHash": "0xc2ed7f1b491fe5b13efac4b8cdb48b21631437766168052ba5c2b22206ceffdd",
        "address": "0xCF7fe2e614f568989869F4AADe060F4EB8a105BE",
        "topics": [
          "0x73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001275209157690000000000000000000000000000000000000000000000000000049d482455da00000000000000000000000000000000000000000000000000000024ea4122af",
        "logIndex": 483,
        "blockHash": "0xe4091c455ae20db753169d9fd4e4f5afd5e387d0bdda824115201745ee6fad30"
      }
    ],
    "blockNumber": 14580673,
    "cumulativeGasUsed": "16294577",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419",
    [
      "0",
      "0",
      "20294266869609",
      "5073566717402",
      "158548959919"
    ],
    "100000000000000000000000000",
    21
  ],
  "solcInputHash": "33471d1f805dc4c2ce08a47f7449bd7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDays\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elapsed\",\"type\":\"uint256\"}],\"name\":\"decayedPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decayedPremium(uint256,uint256)\":{\"details\":\"Returns the premium price at current time elapsed\",\"params\":{\"elapsed\":\"time past since expiry\",\"startPremium\":\"starting price\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"The price of this renewal or registration, in wei.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPrices(uint256[])\":{\"details\":\"Sets rent prices.\",\"params\":{\"_rentPrices\":\"The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/ExponentialPremiumPriceOracle.sol\":\"ExponentialPremiumPriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ethregistrar/ExponentialPremiumPriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StablePriceOracle.sol\\\";\\n\\ncontract ExponentialPremiumPriceOracle is StablePriceOracle {\\n    uint256 constant GRACE_PERIOD = 90 days;\\n    uint256 immutable startPremium;\\n    uint256 immutable endValue;\\n\\n    constructor(\\n        AggregatorInterface _usdOracle,\\n        uint256[] memory _rentPrices,\\n        uint256 _startPremium,\\n        uint256 totalDays\\n    ) StablePriceOracle(_usdOracle, _rentPrices) {\\n        startPremium = _startPremium;\\n        endValue = _startPremium >> totalDays;\\n    }\\n\\n    uint256 constant PRECISION = 1e18;\\n    uint256 constant bit1 = 999989423469314432; // 0.5 ^ 1/65536 * (10 ** 18)\\n    uint256 constant bit2 = 999978847050491904; // 0.5 ^ 2/65536 * (10 ** 18)\\n    uint256 constant bit3 = 999957694548431104;\\n    uint256 constant bit4 = 999915390886613504;\\n    uint256 constant bit5 = 999830788931929088;\\n    uint256 constant bit6 = 999661606496243712;\\n    uint256 constant bit7 = 999323327502650752;\\n    uint256 constant bit8 = 998647112890970240;\\n    uint256 constant bit9 = 997296056085470080;\\n    uint256 constant bit10 = 994599423483633152;\\n    uint256 constant bit11 = 989228013193975424;\\n    uint256 constant bit12 = 978572062087700096;\\n    uint256 constant bit13 = 957603280698573696;\\n    uint256 constant bit14 = 917004043204671232;\\n    uint256 constant bit15 = 840896415253714560;\\n    uint256 constant bit16 = 707106781186547584;\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(\\n        string memory,\\n        uint256 expires,\\n        uint256\\n    ) internal view override returns (uint256) {\\n        expires = expires + GRACE_PERIOD;\\n        if (expires > block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 elapsed = block.timestamp - expires;\\n        uint256 premium = decayedPremium(startPremium, elapsed);\\n        if (premium >= endValue) {\\n            return premium - endValue;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the premium price at current time elapsed\\n     * @param startPremium starting price\\n     * @param elapsed time past since expiry\\n     */\\n    function decayedPremium(uint256 startPremium, uint256 elapsed)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 daysPast = (elapsed * PRECISION) / 1 days;\\n        uint256 intDays = daysPast / PRECISION;\\n        uint256 premium = startPremium >> intDays;\\n        uint256 partDay = (daysPast - intDays * PRECISION);\\n        uint256 fraction = (partDay * (2**16)) / PRECISION;\\n        uint256 totalPremium = addFractionalPremium(fraction, premium);\\n        return totalPremium;\\n    }\\n\\n    function addFractionalPremium(uint256 fraction, uint256 premium)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (fraction & (1 << 0) != 0) {\\n            premium = (premium * bit1) / PRECISION;\\n        }\\n        if (fraction & (1 << 1) != 0) {\\n            premium = (premium * bit2) / PRECISION;\\n        }\\n        if (fraction & (1 << 2) != 0) {\\n            premium = (premium * bit3) / PRECISION;\\n        }\\n        if (fraction & (1 << 3) != 0) {\\n            premium = (premium * bit4) / PRECISION;\\n        }\\n        if (fraction & (1 << 4) != 0) {\\n            premium = (premium * bit5) / PRECISION;\\n        }\\n        if (fraction & (1 << 5) != 0) {\\n            premium = (premium * bit6) / PRECISION;\\n        }\\n        if (fraction & (1 << 6) != 0) {\\n            premium = (premium * bit7) / PRECISION;\\n        }\\n        if (fraction & (1 << 7) != 0) {\\n            premium = (premium * bit8) / PRECISION;\\n        }\\n        if (fraction & (1 << 8) != 0) {\\n            premium = (premium * bit9) / PRECISION;\\n        }\\n        if (fraction & (1 << 9) != 0) {\\n            premium = (premium * bit10) / PRECISION;\\n        }\\n        if (fraction & (1 << 10) != 0) {\\n            premium = (premium * bit11) / PRECISION;\\n        }\\n        if (fraction & (1 << 11) != 0) {\\n            premium = (premium * bit12) / PRECISION;\\n        }\\n        if (fraction & (1 << 12) != 0) {\\n            premium = (premium * bit13) / PRECISION;\\n        }\\n        if (fraction & (1 << 13) != 0) {\\n            premium = (premium * bit14) / PRECISION;\\n        }\\n        if (fraction & (1 << 14) != 0) {\\n            premium = (premium * bit15) / PRECISION;\\n        }\\n        if (fraction & (1 << 15) != 0) {\\n            premium = (premium * bit16) / PRECISION;\\n        }\\n        return premium;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x881a456c0910e5ae3e4614a0ad71b389fd541506183d054de37d87a1769662e5\"},\"contracts/ethregistrar/PriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface PriceOracle {\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return The price of this renewal or registration, in wei.\\n     */\\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\\n}\\n\",\"keccak256\":\"0xcfe3ee922e586ab7a723d10cf6b84299f0d2f94972669cf1e5de3eb8fc0ee2f8\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d6a6c8982dd734335683451a3914cbb49801203772b9fc1fd1efacae75d4ce\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is Ownable, PriceOracle {\\n    using SafeMath for *;\\n    using StringUtils for *;\\n\\n    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\\n    uint256[] public rentPrices;\\n\\n    // Oracle address\\n    AggregatorInterface public immutable usdOracle;\\n\\n    event OracleChanged(address oracle);\\n\\n    event RentPriceChanged(uint256[] prices);\\n\\n    bytes4 private constant INTERFACE_META_ID =\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 private constant ORACLE_ID =\\n        bytes4(\\n            keccak256(\\\"price(string,uint256,uint256)\\\") ^\\n                keccak256(\\\"premium(string,uint256,uint256)\\\")\\n        );\\n\\n    constructor(AggregatorInterface _usdOracle, uint256[] memory _rentPrices)\\n        public\\n    {\\n        usdOracle = _usdOracle;\\n        setPrices(_rentPrices);\\n    }\\n\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view override returns (uint256) {\\n        uint256 len = name.strlen();\\n        if (len > rentPrices.length) {\\n            len = rentPrices.length;\\n        }\\n        require(len > 0);\\n\\n        uint256 basePrice = rentPrices[len - 1].mul(duration);\\n        basePrice = basePrice.add(_premium(name, expires, duration));\\n\\n        return attoUSDToWei(basePrice);\\n    }\\n\\n    /**\\n     * @dev Sets rent prices.\\n     * @param _rentPrices The price array. Each element corresponds to a specific\\n     *                    name length; names longer than the length of the array\\n     *                    default to the price of the last element. Values are\\n     *                    in base price units, equal to one attodollar (1e-18\\n     *                    dollar) each.\\n     */\\n    function setPrices(uint256[] memory _rentPrices) public onlyOwner {\\n        rentPrices = _rentPrices;\\n        emit RentPriceChanged(_rentPrices);\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (uint256) {\\n        uint256 weiPrice = attoUSDToWei(_premium(name, expires, duration));\\n        return weiPrice;\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(\\n        string memory name,\\n        uint256 expires,\\n        uint256 duration\\n    ) internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer()); //2\\n        return amount.mul(1e8).div(ethPrice);\\n    }\\n\\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\\n        return amount.mul(ethPrice).div(1e8);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xf6cc55313c569d3fb1571e3ec802400545acc0203abcc95825be79e3923cff28\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        uint len;\\n        uint i = 0;\\n        uint bytelength = bytes(s).length;\\n        for(len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if(b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x48828eaf42494879c04f560e7b17a402d0a8922fc2047844c338776239fd5c80\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620016af380380620016af8339810160408190526200003491620001da565b8383620000413362000072565b6001600160601b0319606083901b166080526200005e81620000c2565b505060a08290521c60c05250620003329050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b80516200013690600190602084019062000173565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df81604051620001689190620002d6565b60405180910390a150565b828054828255906000526020600020908101928215620001b1579160200282015b82811115620001b157825182559160200191906001019062000194565b50620001bf929150620001c3565b5090565b5b80821115620001bf5760008155600101620001c4565b60008060008060808587031215620001f0578384fd5b84516001600160a01b038116811462000207578485fd5b602086810151919550906001600160401b038082111562000226578586fd5b818801915088601f8301126200023a578586fd5b8151818111156200024f576200024f6200031c565b8060051b604051601f19603f830116810181811085821117156200027757620002776200031c565b604052828152858101935084860182860187018d10156200029657898afd5b8995505b83861015620002ba5780518552600195909501949386019386016200029a565b5060408b01516060909b0151999c909b50975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156200031057835183529284019291840191600101620002f2565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160c05161133c6200037360003960008181610a170152610a41015260006109ee0152600081816101a60152610a9c015261133c6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806379cf92d311610076578063a34e35961161005b578063a34e35961461018e578063c8a4271f146101a1578063f2fde38b146101c857600080fd5b806379cf92d31461013c5780638da5cb5b1461014f57600080fd5b806350e9a715116100a757806350e9a7151461010c57806359e1777c1461011f578063715018a61461013257600080fd5b806301ffc9a7146100c357806306d5d0b6146100eb575b600080fd5b6100d66100d136600461107b565b6101db565b60405190151581526020015b60405180910390f35b6100fe6100f936600461114d565b6101ec565b6040519081526020016100e2565b6100fe61011a3660046110d3565b61020d565b6100fe61012d366004611165565b610335565b61013a6103d0565b005b61013a61014a366004610f9d565b610462565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b6100fe61019c3660046110d3565b610531565b6101697f000000000000000000000000000000000000000000000000000000000000000081565b61013a6101d6366004610f69565b610589565b60006101e6826106b9565b92915050565b600181815481106101fc57600080fd5b600091825260209091200154905081565b60008061024f86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061075192505050565b60015490915081111561026157506001545b6000811161026e57600080fd5b60006102d08460016102808186611258565b815481106102b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015461097f90919063ffffffff16565b905061031f61031888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92508991506109b89050565b8290610a7b565b905061032a81610a97565b979650505050505050565b6000806201518061034e670de0b6b3a76400008561121b565b61035891906111e2565b9050600061036e670de0b6b3a7640000836111e2565b905084811c6000610387670de0b6b3a76400008461121b565b6103919085611258565b90506000670de0b6b3a76400006103ab836201000061121b565b6103b591906111e2565b905060006103c38285610b52565b9998505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104606000610e72565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044d565b80516104f6906001906020840190610f09565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df816040516105269190611186565b60405180910390a150565b60008061057f61057a87878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508891506109b89050565b610a97565b9695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461060a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044d565b73ffffffffffffffffffffffffffffffffffffffff81166106ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161044d565b6106b681610e72565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806101e657507fffffffff0000000000000000000000000000000000000000000000000000000082167ff3a79283000000000000000000000000000000000000000000000000000000001492915050565b8051600090819081905b8082101561097657600085838151811061079e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f8000000000000000000000000000000000000000000000000000000000000000811015610801576107fa6001846111ca565b9250610963565b7fe0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610856576107fa6002846111ca565b7ff0000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156108ab576107fa6003846111ca565b7ff8000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610900576107fa6004846111ca565b7ffc000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610955576107fa6005846111ca565b6109606006846111ca565b92505b508261096e8161126f565b93505061075b565b50909392505050565b60008261098e575060006101e6565b600061099a838561121b565b9050826109a785836111e2565b146109b157600080fd5b9392505050565b60006109c76276a700846111ca565b9250428311156109d9575060006109b1565b60006109e58442611258565b90506000610a137f000000000000000000000000000000000000000000000000000000000000000083610335565b90507f00000000000000000000000000000000000000000000000000000000000000008110610a6f57610a667f000000000000000000000000000000000000000000000000000000000000000082611258565b925050506109b1565b50600095945050505050565b600080610a8883856111ca565b9050838110156109b157600080fd5b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0057600080fd5b505afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3891906110bb565b90506109b181610b4c856305f5e10061097f565b90610ee7565b60006001831615610b8557670de0b6b3a7640000610b78670de0ad151d0941808461121b565b610b8291906111e2565b91505b6002831615610bb657670de0b6b3a7640000610ba9670de0a376995968008461121b565b610bb391906111e2565b91505b6004831615610be757670de0b6b3a7640000610bda670de09039a5fa51008461121b565b610be491906111e2565b91505b6008831615610c1857670de0b6b3a7640000610c0b670de069c00f3e12008461121b565b610c1591906111e2565b91505b6010831615610c4957670de0b6b3a7640000610c3c670de01cce21c944008461121b565b610c4691906111e2565b91505b6020831615610c7a57670de0b6b3a7640000610c6d670ddf82ef46ce10008461121b565b610c7791906111e2565b91505b6040831615610cab57670de0b6b3a7640000610c9e670dde4f458f8e8d808461121b565b610ca891906111e2565b91505b6080831615610cdc57670de0b6b3a7640000610ccf670ddbe84213d5f0808461121b565b610cd991906111e2565b91505b610100831615610d0e57670de0b6b3a7640000610d01670dd71b7aa6df5b808461121b565b610d0b91906111e2565b91505b610200831615610d4057670de0b6b3a7640000610d33670dcd86e7f28cde008461121b565b610d3d91906111e2565b91505b610400831615610d7257670de0b6b3a7640000610d65670dba71a3084ad6808461121b565b610d6f91906111e2565b91505b610800831615610da457670de0b6b3a7640000610d97670d94961b13dbde808461121b565b610da191906111e2565b91505b611000831615610dd657670de0b6b3a7640000610dc9670d4a171c35c983808461121b565b610dd391906111e2565b91505b612000831615610e0857670de0b6b3a7640000610dfb670cb9da519ccfb7008461121b565b610e0591906111e2565b91505b614000831615610e3a57670de0b6b3a7640000610e2d670bab76d59c18d6808461121b565b610e3791906111e2565b91505b618000831615610e6c57670de0b6b3a7640000610e5f6709d025defee4df808461121b565b610e6991906111e2565b91505b50919050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808211610ef557600080fd5b6000610f0183856111e2565b949350505050565b828054828255906000526020600020908101928215610f44579160200282015b82811115610f44578251825591602001919060010190610f29565b50610f50929150610f54565b5090565b5b80821115610f505760008155600101610f55565b600060208284031215610f7a578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146109b1578182fd5b60006020808385031215610faf578182fd5b823567ffffffffffffffff80821115610fc6578384fd5b818501915085601f830112610fd9578384fd5b813581811115610feb57610feb6112d7565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561102e5761102e6112d7565b604052828152858101935084860182860187018a101561104c578788fd5b8795505b8386101561106e578035855260019590950194938601938601611050565b5098975050505050505050565b60006020828403121561108c578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109b1578182fd5b6000602082840312156110cc578081fd5b5051919050565b600080600080606085870312156110e8578283fd5b843567ffffffffffffffff808211156110ff578485fd5b818701915087601f830112611112578485fd5b813581811115611120578586fd5b886020828501011115611131578586fd5b6020928301999098509187013596604001359550909350505050565b60006020828403121561115e578081fd5b5035919050565b60008060408385031215611177578182fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156111be578351835292840192918401916001016111a2565b50909695505050505050565b600082198211156111dd576111dd6112a8565b500190565b600082611216577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611253576112536112a8565b500290565b60008282101561126a5761126a6112a8565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112a1576112a16112a8565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220765692640890cdacba63b8b569b2cfab46efc7762637da7215a9bde8f02b390864736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decayedPremium(uint256,uint256)": {
        "details": "Returns the premium price at current time elapsed",
        "params": {
          "elapsed": "time past since expiry",
          "startPremium": "starting price"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "The price of this renewal or registration, in wei."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPrices(uint256[])": {
        "details": "Sets rent prices.",
        "params": {
          "_rentPrices": "The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 545,
        "contract": "contracts/ethregistrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11974,
        "contract": "contracts/ethregistrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "rentPrices",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}